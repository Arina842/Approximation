import numpy as np
import matplotlib.pyplot as plt
from dataclasses import dataclass
from typing import Union
from scipy import interpolate
from scipy.interpolate import CubicSpline

cycles = np.array(
    [0.0, 0.05, 0.1, 0.15000000000000002, 0.2, 0.25, 0.30000000000000004, 0.35000000000000003, 0.4, 0.45, 0.5, 0.55,
     0.6000000000000001, 0.65, 0.7000000000000001, 0.75, 0.8, 0.8500000000000001, 0.9, 0.9500000000000001, 1.0, 1.05,
     1.1, 1.1500000000000001, 1.2000000000000002, 1.25, 1.3, 1.35, 1.4000000000000001, 1.4500000000000002, 1.5, 1.55,
     1.6, 1.6500000000000001, 1.7000000000000002, 1.75, 1.8, 1.85, 1.9000000000000001, 1.9500000000000002, 2.0,
     2.0500000000000003, 2.1, 2.15, 2.2, 2.25, 2.3000000000000003, 2.35, 2.4000000000000004, 2.45, 2.5,
     2.5500000000000003, 2.6, 2.6500000000000004, 2.7, 2.75, 2.8000000000000003, 2.85, 2.9000000000000004, 2.95, 3.0,
     3.0500000000000003, 3.1, 3.1500000000000004, 3.2, 3.25, 3.3000000000000003, 3.35, 3.4000000000000004, 3.45, 3.5,
     3.5500000000000003, 3.6, 3.6500000000000004, 3.7, 3.75, 3.8000000000000003, 3.85, 3.9000000000000004, 3.95, 4.0,
     4.05, 4.1000000000000005, 4.15, 4.2, 4.25, 4.3, 4.3500000000000005, 4.4, 4.45, 4.5, 4.55, 4.6000000000000005, 4.65,
     4.7, 4.75, 4.800000000000001, 4.8500000000000005, 4.9, 4.95, 5.0, 5.050000000000001, 5.1000000000000005, 5.15, 5.2,
     5.25, 5.300000000000001, 5.3500000000000005, 5.4, 5.45, 5.5, 5.550000000000001, 5.6000000000000005, 5.65, 5.7,
     5.75, 5.800000000000001, 5.8500000000000005, 5.9, 5.95, 6.0, 6.050000000000001, 6.1000000000000005, 6.15, 6.2,
     6.25, 6.300000000000001, 6.3500000000000005, 6.4, 6.45, 6.5, 6.550000000000001, 6.6000000000000005, 6.65, 6.7,
     6.75, 6.800000000000001, 6.8500000000000005, 6.9, 6.95, 7.0, 7.050000000000001, 7.1000000000000005, 7.15, 7.2,
     7.25, 7.300000000000001, 7.3500000000000005, 7.4, 7.45, 7.5, 7.550000000000001, 7.6000000000000005, 7.65, 7.7,
     7.75, 7.800000000000001, 7.8500000000000005, 7.9, 7.95, 8.0, 8.05, 8.1, 8.15, 8.200000000000001, 8.25, 8.3, 8.35,
     8.4, 8.450000000000001, 8.5, 8.55, 8.6, 8.65, 8.700000000000001, 8.75, 8.8, 8.85, 8.9, 8.950000000000001, 9.0])
strain = np.array(
    [0.0, 0.002704122622613223, 0.004734273950460789, 0.00622620278775675, 0.0076184477710014116, 0.008643263380171011,
     0.009639544651561126, 0.010467619284694864, 0.010955336576356955, 0.011058967095125884, 0.010864495326967477,
     0.010561798531001108, 0.010727148636544052, 0.011036309406619224, 0.011434208647091314, 0.012007184133876104,
     0.012659760801444498, 0.013269973105117861, 0.014180250994300975, 0.01544839391495469, 0.016862874851992317,
     0.018292722676501432, 0.019234686775335214, 0.019971687091059148, 0.02052007144003864, 0.02094274992387366,
     0.021367617400868996, 0.021594004672883513, 0.021607603565702713, 0.021272318543976203, 0.02072422895133621,
     0.020142386719152063, 0.019915074931114846, 0.019858361538279433, 0.02015801832847817, 0.020509173794649498,
     0.02090114263266841, 0.021331375250265943, 0.021963216861956774, 0.023111559042122642, 0.024307675759812273,
     0.02556382877593762, 0.026571783950044024, 0.027098045315881152, 0.02747267271895797, 0.027756472071979486,
     0.027955956887925414, 0.02791502583664775, 0.027743429427405326, 0.027262736709690812, 0.02634421199765562,
     0.025520796324368652, 0.02506026951778535, 0.024848904448737153, 0.024928872631187697, 0.024962157703566627,
     0.025142744130579448, 0.025333795609878838, 0.025821297320015382, 0.02660886258990591, 0.027786646671293158,
     0.02892109141402685, 0.029628707044876936, 0.0299715173310774, 0.030129617665850743, 0.030295443320214336,
     0.0304697848474464, 0.030428013430772366, 0.030241999293334116, 0.02953840418678355, 0.02869226707165212,
     0.027918070115178877, 0.027590627717063096, 0.027500441513746886, 0.027610673257192676, 0.027914916150470002,
     0.028290287625280183, 0.028695161273199064, 0.029417684972393082, 0.030454414040791713, 0.03174393866605677,
     0.03306476317524391, 0.03397276268826185, 0.03448288610037643, 0.034840701275316355, 0.03521995753059717,
     0.03539512868669923, 0.03543590058029312, 0.035135023579571, 0.034620851738086246, 0.033712161811249114,
     0.032808702981413494, 0.03233001428811974, 0.03218698243203419, 0.03216248241466634, 0.032199841144536674,
     0.032279284887997015, 0.032504610611197755, 0.03303005320741395, 0.03376196443070642, 0.03493866217804204,
     0.035904490252353816, 0.036573614212116835, 0.03679946679349178, 0.03684579643820628, 0.03682577663592072,
     0.036838878157854846, 0.036656474755420373, 0.0362337882154723, 0.035528129717760655, 0.034474628627178656,
     0.03342232785170879, 0.032702577213590614, 0.032277508073497274, 0.03217037579379166, 0.0321790569827157,
     0.03234681637757348, 0.032654183167254026, 0.03333160853391649, 0.034404478658212126, 0.03591733244632587,
     0.03725787371141187, 0.03802619554276893, 0.03858660061710526, 0.038801983840053136, 0.03899641111314876,
     0.03915162439696928, 0.03917805524016007, 0.038839333497681455, 0.038091723497983725, 0.03677106599502913,
     0.03537922429150447, 0.03444948822231235, 0.03394578481780496, 0.03372631888461875, 0.0336495326650896,
     0.033766007766253735, 0.034208736698422525, 0.03511182245396142, 0.03665867516887857, 0.03853144758650144,
     0.040051587832002786, 0.04104016325059531, 0.04145162949798616, 0.04165721896829568, 0.04182796628397439,
     0.0418347391148033, 0.04187834298139835, 0.04154575073628246, 0.04037056868887528, 0.03863125036581041,
     0.036506235499492494, 0.03485719951735901, 0.03386951654646701, 0.03337944011239035, 0.03322326890030695,
     0.03337032246938981, 0.03395134238612487, 0.035169153238588234, 0.03736690689892474, 0.039946189337542085,
     0.04211740746225751, 0.04325429881012174, 0.04371750960549295, 0.04382443408605796, 0.04380721492492266, 0.044,
     0.043978306519364664, 0.04353547924142668, 0.04213151539083622, 0.03959909690853221, 0.036747573140625024,
     0.03446885095745565, 0.0331749739026295, 0.032590702105408924, 0.03235205524754297, 0.032658317394594176,
     0.0334726743141317, 0.03533803578380648, 0.038232109169101254, 0.04120883376183204])

# cycles = np.array([0.  , 0.05, 0.1 , 0.15, 0.2 , 0.25, 0.3 , 0.35, 0.4 , 0.45, 0.5 ,
#        0.55, 0.6 , 0.65, 0.7 , 0.75, 0.8 , 0.85, 0.9 , 0.95, 1.  , 1.05,
#        1.1 , 1.15, 1.2 , 1.25, 1.3 , 1.35, 1.4 , 1.45, 1.5 , 1.55, 1.6 ,
#        1.65, 1.7 , 1.75, 1.8 , 1.85, 1.9 , 1.95, 2.  , 2.05, 2.1 , 2.15,
#        2.2 , 2.25, 2.3 , 2.35, 2.4 , 2.45, 2.5 , 2.55, 2.6 , 2.65, 2.7 ,
#        2.75, 2.8 , 2.85, 2.9 , 2.95, 3.  , 3.05, 3.1 , 3.15, 3.2 , 3.25,
#        3.3 , 3.35, 3.4 , 3.45, 3.5 , 3.55, 3.6 , 3.65, 3.7 , 3.75, 3.8 ,
#        3.85, 3.9 , 3.95, 4.  , 4.05, 4.1 , 4.15, 4.2 , 4.25, 4.3 , 4.35,
#        4.4 , 4.45, 4.5 , 4.55, 4.6 , 4.65, 4.7 , 4.75, 4.8 , 4.85, 4.9 ,
#        4.95, 5.  , 5.05, 5.1 , 5.15, 5.2 , 5.25, 5.3 , 5.35, 5.4 , 5.45,
#        5.5 , 5.55, 5.6 , 5.65, 5.7 , 5.75, 5.8 , 5.85, 5.9 , 5.95, 6.  ,
#        6.05, 6.1 , 6.15, 6.2 , 6.25, 6.3 , 6.35, 6.4 , 6.45, 6.5 , 6.55,
#        6.6 , 6.65, 6.7 , 6.75, 6.8 , 6.85, 6.9 , 6.95, 7.  , 7.05, 7.1 ,
#        7.15, 7.2 , 7.25, 7.3 , 7.35, 7.4 , 7.45, 7.5 , 7.55, 7.6 , 7.65,
#        7.7 , 7.75, 7.8 , 7.85, 7.9 , 7.95, 8.  , 8.05, 8.1 , 8.15, 8.2 ,
#        8.25, 8.3 , 8.35, 8.4 , 8.45, 8.5 , 8.55, 8.6 , 8.65, 8.7 , 8.75,
#        8.8 , 8.85, 8.9 , 8.95, 9.  ])
# strain = np.array([ 0.00000000e+00,  1.08798270e-04,  2.06112926e-04,  2.39140155e-04,
#         2.23895909e-04,  1.63111565e-04,  1.59095033e-04,  2.45098180e-04,
#         1.54295494e-04,  6.99894830e-05,  3.68149220e-06, -8.94848869e-06,
#        -8.76287385e-05, -6.16459222e-05, -6.10140358e-05, -1.05982153e-04,
#        -1.16738825e-04, -1.22329930e-04,  1.03655975e-05,  1.07153293e-04,
#         1.24015923e-04,  1.95618611e-04,  2.71235467e-04,  3.24764276e-04,
#         3.50384716e-04,  4.32313432e-04,  4.26129680e-04,  2.97494547e-04,
#         3.34479201e-04,  2.56305546e-04,  1.09037113e-04,  1.11371256e-04,
#        -2.40982721e-05,  4.05726048e-05,  2.45833619e-05,  1.65636442e-05,
#         5.80662621e-06,  3.00665438e-05,  8.09407398e-05,  1.03039939e-04,
#         2.63161316e-04,  3.70696503e-04,  4.39061876e-04,  4.71337509e-04,
#         4.60729003e-04,  3.78135298e-04,  4.42915828e-04,  4.02954177e-04,
#         3.16810814e-04,  2.32331310e-04,  1.43694058e-04,  9.00179887e-05,
#         1.11561196e-04,  2.62292938e-05,  1.06713483e-04,  7.75628143e-06,
#         1.84411823e-05,  1.45123795e-04,  1.27961039e-04,  2.35708503e-04,
#         3.99420229e-04,  4.41889203e-04,  5.28405463e-04,  5.37739013e-04,
#         5.64377844e-04,  5.52229221e-04,  5.57651698e-04,  5.82853320e-04,
#         4.88869312e-04,  4.65170860e-04,  4.49261167e-04,  3.63768336e-04,
#         3.15573300e-04,  2.63566636e-04,  2.73202462e-04,  2.98096214e-04,
#         2.18624846e-04,  2.26902471e-04,  2.83005114e-04,  4.15958066e-04,
#         5.47391003e-04,  5.48544681e-04,  6.02680795e-04,  6.85349302e-04,
#         7.55919686e-04,  7.04977044e-04,  6.47080200e-04,  6.97363291e-04,
#         6.05715413e-04,  5.45424529e-04,  5.06601547e-04,  4.39161816e-04,
#         3.20877587e-04,  2.85055397e-04,  3.30324789e-04,  3.37273022e-04,
#         3.15156871e-04,  4.20712700e-04,  4.51169574e-04,  5.27964805e-04,
#         5.67422891e-04,  6.59994928e-04,  7.82617487e-04,  8.32286172e-04,
#         8.40499123e-04,  8.59093930e-04,  8.20575210e-04,  7.99564397e-04,
#         7.27772310e-04,  7.19971134e-04,  5.74462689e-04,  4.62832631e-04,
#         4.87381744e-04,  4.16006759e-04,  4.09271054e-04,  4.99403074e-04,
#         4.64894222e-04,  5.16784592e-04,  5.23725563e-04,  6.17734214e-04,
#         7.81742138e-04,  8.57022564e-04,  8.30843849e-04,  9.24405227e-04,
#         9.42298958e-04,  8.54149511e-04,  8.44436641e-04,  8.39896252e-04,
#         8.03958828e-04,  7.82697794e-04,  7.41201448e-04,  6.36140980e-04,
#         6.25997138e-04,  5.26243905e-04,  6.12296028e-04,  5.74689343e-04,
#         4.99528784e-04,  5.12211791e-04,  6.07046651e-04,  7.16292933e-04,
#         8.15357135e-04,  9.45288475e-04,  9.89967020e-04,  9.51627026e-04,
#         1.01609583e-03,  1.08171744e-03,  9.92689341e-04,  1.02052972e-03,
#         9.44592504e-04,  9.07429649e-04,  8.49140032e-04,  7.21058352e-04,
#         7.39003671e-04,  6.20496505e-04,  6.13608526e-04,  6.66525967e-04,
#         7.44105804e-04,  7.44760878e-04,  6.98475989e-04,  8.38373204e-04,
#         9.79858577e-04,  1.09215983e-03,  1.16144104e-03,  1.09997796e-03,
#         1.11238727e-03,  1.19069294e-03,  1.20000000e-03,  1.16532228e-03,
#         1.17090059e-03,  1.07860434e-03,  9.29365813e-04,  9.07931065e-04,
#         8.74282872e-04,  8.35070937e-04,  8.20869151e-04,  8.05133060e-04,
#         7.87737389e-04,  7.71837532e-04,  8.34823490e-04,  9.14144647e-04,
#         1.00930832e-03])
# cycles = np.array(
#     [0.0, 0.05, 0.1, 0.15000000000000002, 0.2, 0.25, 0.30000000000000004, 0.35000000000000003, 0.4, 0.45, 0.5, 0.55,
#      0.6000000000000001, 0.65, 0.7000000000000001, 0.75, 0.8, 0.8500000000000001, 0.9, 0.9500000000000001, 1.0, 1.05,
#      1.1, 1.1500000000000001, 1.2000000000000002, 1.25, 1.3, 1.35, 1.4000000000000001, 1.4500000000000002, 1.5, 1.55,
#      1.6, 1.6500000000000001, 1.7000000000000002, 1.75, 1.8, 1.85, 1.9000000000000001, 1.9500000000000002, 2.0,
#      2.0500000000000003, 2.1, 2.15, 2.2, 2.25, 2.3000000000000003, 2.35, 2.4000000000000004, 2.45, 2.5,
#      2.5500000000000003, 2.6, 2.6500000000000004, 2.7, 2.75, 2.8000000000000003, 2.85, 2.9000000000000004, 2.95, 3.0,
#      3.0500000000000003, 3.1, 3.1500000000000004, 3.2, 3.25, 3.3000000000000003, 3.35, 3.4000000000000004, 3.45, 3.5,
#      3.5500000000000003, 3.6, 3.6500000000000004, 3.7, 3.75, 3.8000000000000003, 3.85, 3.9000000000000004, 3.95, 4.0,
#      4.05, 4.1000000000000005, 4.15, 4.2, 4.25, 4.3, 4.3500000000000005, 4.4, 4.45, 4.5, 4.55, 4.6000000000000005, 4.65,
#      4.7, 4.75, 4.800000000000001, 4.8500000000000005, 4.9, 4.95, 5.0, 5.050000000000001, 5.1000000000000005, 5.15, 5.2,
#      5.25, 5.300000000000001, 5.3500000000000005, 5.4, 5.45, 5.5, 5.550000000000001, 5.6000000000000005, 5.65, 5.7,
#      5.75, 5.800000000000001, 5.8500000000000005, 5.9, 5.95, 6.0, 6.050000000000001, 6.1000000000000005, 6.15, 6.2,
#      6.25, 6.300000000000001, 6.3500000000000005, 6.4, 6.45, 6.5, 6.550000000000001, 6.6000000000000005, 6.65, 6.7,
#      6.75, 6.800000000000001, 6.8500000000000005, 6.9, 6.95, 7.0, 7.050000000000001, 7.1000000000000005, 7.15, 7.2,
#      7.25, 7.300000000000001, 7.3500000000000005, 7.4, 7.45, 7.5, 7.550000000000001, 7.6000000000000005, 7.65, 7.7,
#      7.75, 7.800000000000001, 7.8500000000000005, 7.9, 7.95, 8.0, 8.05, 8.1, 8.15, 8.200000000000001, 8.25, 8.3, 8.35,
#      8.4, 8.450000000000001, 8.5, 8.55, 8.6, 8.65, 8.700000000000001, 8.75, 8.8, 8.85, 8.9, 8.950000000000001, 9.0])
# strain = np.array(
#     [0.0, 0.002704122622613223, 0.004734273950460789, 0.00622620278775675, 0.0076184477710014116, 0.008643263380171011,
#      0.009639544651561126, 0.010467619284694864, 0.010955336576356955, 0.011058967095125884, 0.010864495326967477,
#      0.010561798531001108, 0.010727148636544052, 0.011036309406619224, 0.011434208647091314, 0.012007184133876104,
#      0.012659760801444498, 0.013269973105117861, 0.014180250994300975, 0.01544839391495469, 0.016862874851992317,
#      0.018292722676501432, 0.019234686775335214, 0.019971687091059148, 0.02052007144003864, 0.02094274992387366,
#      0.021367617400868996, 0.021594004672883513, 0.021607603565702713, 0.021272318543976203, 0.02072422895133621,
#      0.020142386719152063, 0.019915074931114846, 0.019858361538279433, 0.02015801832847817, 0.020509173794649498,
#      0.02090114263266841, 0.021331375250265943, 0.021963216861956774, 0.023111559042122642, 0.024307675759812273,
#      0.02556382877593762, 0.026571783950044024, 0.027098045315881152, 0.02747267271895797, 0.027756472071979486,
#      0.027955956887925414, 0.02791502583664775, 0.027743429427405326, 0.027262736709690812, 0.02634421199765562,
#      0.025520796324368652, 0.02506026951778535, 0.024848904448737153, 0.024928872631187697, 0.024962157703566627,
#      0.025142744130579448, 0.025333795609878838, 0.025821297320015382, 0.02660886258990591, 0.027786646671293158,
#      0.02892109141402685, 0.029628707044876936, 0.0299715173310774, 0.030129617665850743, 0.030295443320214336,
#      0.0304697848474464, 0.030428013430772366, 0.030241999293334116, 0.02953840418678355, 0.02869226707165212,
#      0.027918070115178877, 0.027590627717063096, 0.027500441513746886, 0.027610673257192676, 0.027914916150470002,
#      0.028290287625280183, 0.028695161273199064, 0.029417684972393082, 0.030454414040791713, 0.03174393866605677,
#      0.03306476317524391, 0.03397276268826185, 0.03448288610037643, 0.034840701275316355, 0.03521995753059717,
#      0.03539512868669923, 0.03543590058029312, 0.035135023579571, 0.034620851738086246, 0.033712161811249114,
#      0.032808702981413494, 0.03233001428811974, 0.03218698243203419, 0.03216248241466634, 0.032199841144536674,
#      0.032279284887997015, 0.032504610611197755, 0.03303005320741395, 0.03376196443070642, 0.03493866217804204,
#      0.035904490252353816, 0.036573614212116835, 0.03679946679349178, 0.03684579643820628, 0.03682577663592072,
#      0.036838878157854846, 0.036656474755420373, 0.0362337882154723, 0.035528129717760655, 0.034474628627178656,
#      0.03342232785170879, 0.032702577213590614, 0.032277508073497274, 0.03217037579379166, 0.0321790569827157,
#      0.03234681637757348, 0.032654183167254026, 0.03333160853391649, 0.034404478658212126, 0.03591733244632587,
#      0.03725787371141187, 0.03802619554276893, 0.03858660061710526, 0.038801983840053136, 0.03899641111314876,
#      0.03915162439696928, 0.03917805524016007, 0.038839333497681455, 0.038091723497983725, 0.03677106599502913,
#      0.03537922429150447, 0.03444948822231235, 0.03394578481780496, 0.03372631888461875, 0.0336495326650896,
#      0.033766007766253735, 0.034208736698422525, 0.03511182245396142, 0.03665867516887857, 0.03853144758650144,
#      0.040051587832002786, 0.04104016325059531, 0.04145162949798616, 0.04165721896829568, 0.04182796628397439,
#      0.0418347391148033, 0.04187834298139835, 0.04154575073628246, 0.04037056868887528, 0.03863125036581041,
#      0.036506235499492494, 0.03485719951735901, 0.03386951654646701, 0.03337944011239035, 0.03322326890030695,
#      0.03337032246938981, 0.03395134238612487, 0.035169153238588234, 0.03736690689892474, 0.039946189337542085,
#      0.04211740746225751, 0.04325429881012174, 0.04371750960549295, 0.04382443408605796, 0.04380721492492266, 0.044,
#      0.043978306519364664, 0.04353547924142668, 0.04213151539083622, 0.03959909690853221, 0.036747573140625024,
#      0.03446885095745565, 0.0331749739026295, 0.032590702105408924, 0.03235205524754297, 0.032658317394594176,
#      0.0334726743141317, 0.03533803578380648, 0.038232109169101254, 0.04120883376183204])

cycles = np.array([0.  , 0.05, 0.1 , 0.15, 0.2 , 0.25, 0.3 , 0.35, 0.4 , 0.45, 0.5 ,
       0.55, 0.6 , 0.65, 0.7 , 0.75, 0.8 , 0.85, 0.9 , 0.95, 1.  , 1.05,
       1.1 , 1.15, 1.2 , 1.25, 1.3 , 1.35, 1.4 , 1.45, 1.5 , 1.55, 1.6 ,
       1.65, 1.7 , 1.75, 1.8 , 1.85, 1.9 , 1.95, 2.  , 2.05, 2.1 , 2.15,
       2.2 , 2.25, 2.3 , 2.35, 2.4 , 2.45, 2.5 , 2.55, 2.6 , 2.65, 2.7 ,
       2.75, 2.8 , 2.85, 2.9 , 2.95, 3.  , 3.05, 3.1 , 3.15, 3.2 , 3.25,
       3.3 , 3.35, 3.4 , 3.45, 3.5 , 3.55, 3.6 , 3.65, 3.7 , 3.75, 3.8 ,
       3.85, 3.9 , 3.95, 4.  , 4.05, 4.1 , 4.15, 4.2 , 4.25, 4.3 , 4.35,
       4.4 , 4.45, 4.5 , 4.55, 4.6 , 4.65, 4.7 , 4.75, 4.8 , 4.85, 4.9 ,
       4.95, 5.  , 5.05, 5.1 , 5.15, 5.2 , 5.25, 5.3 , 5.35, 5.4 , 5.45,
       5.5 , 5.55, 5.6 , 5.65, 5.7 , 5.75, 5.8 , 5.85, 5.9 , 5.95, 6.  ,
       6.05, 6.1 , 6.15, 6.2 , 6.25, 6.3 , 6.35, 6.4 , 6.45, 6.5 , 6.55,
       6.6 , 6.65, 6.7 , 6.75, 6.8 , 6.85, 6.9 , 6.95, 7.  , 7.05, 7.1 ,
       7.15, 7.2 , 7.25, 7.3 , 7.35, 7.4 , 7.45, 7.5 , 7.55, 7.6 , 7.65,
       7.7 , 7.75, 7.8 , 7.85, 7.9 , 7.95, 8.  , 8.05, 8.1 , 8.15, 8.2 ,
       8.25, 8.3 , 8.35, 8.4 , 8.45, 8.5 , 8.55, 8.6 , 8.65, 8.7 , 8.75,
       8.8 , 8.85, 8.9 , 8.95, 9.  ])
strain = np.array([0.00000000e+00, 1.83037807e-04, 1.94076199e-04, 3.26197028e-04,
       3.46280675e-04, 3.29186353e-04, 3.44462917e-04, 3.65406437e-04,
       2.92919716e-04, 2.28927300e-04, 2.21413978e-04, 1.49991128e-04,
       5.26015563e-05, 2.53391734e-05, 9.59473539e-05, 1.58393557e-04,
       1.80611804e-04, 1.31568900e-04, 1.23724104e-04, 2.13559437e-04,
       3.69179993e-04, 4.81391491e-04, 5.69729642e-04, 5.33022882e-04,
       5.53596644e-04, 5.60911691e-04, 5.60134485e-04, 5.66917975e-04,
       5.87128427e-04, 5.16882266e-04, 4.19630673e-04, 3.85204060e-04,
       2.36204389e-04, 2.69781514e-04, 2.43128404e-04, 3.16903094e-04,
       2.52615245e-04, 2.22130742e-04, 2.75949524e-04, 4.17033268e-04,
       5.15430887e-04, 6.26947198e-04, 6.35972431e-04, 7.34466641e-04,
       7.11616651e-04, 6.75429140e-04, 6.51545729e-04, 6.71327198e-04,
       6.23969330e-04, 6.16432210e-04, 5.33643649e-04, 4.20756308e-04,
       4.35960269e-04, 4.24305529e-04, 3.10071532e-04, 3.70761254e-04,
       4.37281506e-04, 4.48909179e-04, 4.47651759e-04, 5.67554012e-04,
       5.69641761e-04, 6.72325324e-04, 7.67824442e-04, 7.93490674e-04,
       7.96062953e-04, 7.94890314e-04, 8.28412539e-04, 8.22102608e-04,
       8.32855941e-04, 6.99731245e-04, 6.54186258e-04, 5.71084376e-04,
       5.53567419e-04, 4.63295251e-04, 4.88444882e-04, 4.81713633e-04,
       5.31302718e-04, 4.92976442e-04, 5.04088451e-04, 6.74374811e-04,
       7.76627048e-04, 7.78901885e-04, 9.28997608e-04, 9.39323816e-04,
       9.83405493e-04, 9.21911714e-04, 8.75337953e-04, 8.91736732e-04,
       8.50673709e-04, 7.67361024e-04, 6.70530186e-04, 5.75057478e-04,
       5.43773698e-04, 5.70711103e-04, 5.80306018e-04, 6.34888777e-04,
       6.13954027e-04, 5.70948126e-04, 6.39591990e-04, 7.37292488e-04,
       8.73010602e-04, 9.71665196e-04, 9.69762030e-04, 9.92174841e-04,
       9.59338505e-04, 9.74549924e-04, 9.86868169e-04, 1.02148105e-03,
       9.67957712e-04, 8.65002459e-04, 7.87653768e-04, 7.45814711e-04,
       6.44643984e-04, 6.09779147e-04, 6.26055176e-04, 6.07462940e-04,
       6.77440578e-04, 6.38191291e-04, 6.59168414e-04, 8.30140745e-04,
       8.45683680e-04, 9.14350282e-04, 1.02760796e-03, 1.10240920e-03,
       1.11406426e-03, 1.06322882e-03, 1.09880993e-03, 1.10731794e-03,
       9.76465665e-04, 9.30832223e-04, 9.03362997e-04, 7.75040800e-04,
       6.54198906e-04, 6.99916669e-04, 6.95910771e-04, 7.32143628e-04,
       7.59044853e-04, 7.09152672e-04, 7.67161545e-04, 8.77554077e-04,
       9.92811895e-04, 1.06604896e-03, 1.05578599e-03, 1.05020310e-03,
       1.08492763e-03, 1.09360558e-03, 1.06742915e-03, 1.04700943e-03,
       1.11819720e-03, 1.05968849e-03, 8.92072534e-04, 7.61219311e-04,
       6.99135075e-04, 6.98551872e-04, 7.26572510e-04, 7.68449216e-04,
       7.44045846e-04, 7.81959053e-04, 7.82888214e-04, 9.30039883e-04,
       1.01800229e-03, 1.00322086e-03, 1.07238723e-03, 1.20000000e-03,
       1.14186806e-03, 1.11757400e-03, 1.11816537e-03, 1.14445057e-03,
       1.11945736e-03, 1.01590066e-03, 9.70111088e-04, 8.67830105e-04,
       7.72624834e-04, 8.34997619e-04, 7.62864233e-04, 7.59733270e-04,
       7.45906473e-04, 8.26990641e-04, 8.34283004e-04, 9.17564365e-04,
       1.06457265e-03])
@dataclass
class Line:
    x: Union[np.array, list] = None
    y: Union[np.array, list] = None


@dataclass
class MinMaxProcessing:
    max_points: Line = None  # точки максимумов
    min_points: Line = None  # точки минимумов
    max_line: Line = None  # линия максимумов
    min_line: Line = None  # линия минимумов
    middle_line: Line = None  # средняя линяя
    distance_line: Line = None  # линия удаления максимумов и минимумов от средней линии
    distance_min: list = None,
    distance_max: list = None,
    maximums: dict = None


def min_max_analyzer(x: np.array, y: np.array) -> MinMaxProcessing:
    """
    .....................
    Функция для  последовательного нахождения максимумов и минимумов,
    интерполировании их линий, нахождения средней линии, нахождения расстояния
    от вершин до средней линии.
    :param x:
    :param y:
    :return: np.array(x_max_array_new), np.array(y_max_array_new), np.array(x_min_array_new), np.array(y_min_array_new),
            np.array(x_middle_line_array), np.array(y_middle_line_array), np.array(distance_min),
            np.array(distance_max), maximums,x_points,y_points
    """
    max_x = np.max(x)
    min_x = np.min(x)
    max_y = np.max(y)
    min_y = np.min(y)

    # Применяем кубически сплайн для последующего нахождения знаков производной
    cs = CubicSpline(x, y)
    y = y.tolist()
    x = x.tolist()
    m = cs(x, 1)
    k = m.tolist()

    y_max_array = [0]
    x_min_array = [0]
    y_min_array = [0]
    x_max_array = [0]

    # Находим точку изменения знака производной, сравнивая текущее значение с предыдущим
    i = 1
    while i < len(k):
        if k[i - 1] > 0 and k[i] < 0:
            if y[i - 1] > y[i]:
                y_max_array.append(y[i - 1])
                x_max_array.append(x[i - 1])
            elif y[i - 1] < y[i]:
                y_max_array.append(y[i])
                x_max_array.append(x[i])
        elif k[i - 1] < 0 and k[i] > 0:
            if y[i - 1] < y[i]:
                y_min_array.append(y[i - 1])
                x_min_array.append(x[i - 1])
            elif y[i - 1] > y[i]:
                y_min_array.append(y[i])
                x_min_array.append(x[i])
        i += 1
    # Добавление последнего значения исходного массива к линиям максимумов и минимумов
    y_min_array.append(y[- 1])
    x_min_array.append(x[- 1])
    y_max_array.append(y[- 1])
    x_max_array.append(x[- 1])
    print('x_min_array', len(x_min_array), len(y_min_array),x_min_array )
    print('x_max_array', len(x_max_array), len(y_max_array), x_max_array)
    # Цикл для удаления точек максимума, если расстояние между ними менее 5 точек.
    # Сравнивается текущее значение с предыдущим
    i = 2
    while i < len(y_max_array):
        if (y.index(y_max_array[i]) - y.index(y_max_array[i - 1])) < 10:
            if y_max_array[i] > y_max_array[i - 1]:
                y_max_array.remove(y_max_array[i - 1])
                x_max_array.remove(x_max_array[i - 1])
                i=2
            elif y_max_array[i] < y_max_array[i - 1]:
                y_max_array.remove(y_max_array[i])
                x_max_array.remove(x_max_array[i])
                i=2
        i += 1

    # Цикл для удаления точек минимума, если расстояние между ними менее 5 точек.
    # Сравнивается текущее значение с предыдущим
    i = 1
    while i < len(y_min_array):
        if (y.index(y_min_array[i]) - y.index(y_min_array[i - 1])) < 15:
            if y_min_array[i] < y_min_array[i - 1]:
                y_min_array.remove(y_min_array[i - 1])
                x_min_array.remove(x_min_array[i - 1])
                i=1
            elif y_min_array[i] > y_min_array[i - 1]:
                y_min_array.remove(y_min_array[i])
                x_min_array.remove(x_min_array[i])
                i=1
        i += 1

    # Цикл для удаления точек максимума, если между ними разница по игреку больше половины значения последующей точки.
    # Нулевое значение ноль, поэтому отсчёт с 2-го элемента
    i = 2
    while i < (len(y_max_array)):
        if y_max_array[i] - y_max_array[i - 1] > (y_max_array[i] / 2):
            y_max_array.remove(y_max_array[i - 1])
            x_max_array.remove(x_max_array[i - 1])
        i += 1

    # Цикл для удаления точек минимума, если между ними разница по игреку больше половины 1/4 разницы общего максимума
    # к общему минимуму по игреку.
    # Нулевое значение ноль, поэтому отсчёт с 2-го элемента
    i = 2
    while i < (len(y_min_array)):
        if y_min_array[i] - y_min_array[i - 1] > ((max_y - min_y) / 4):
            y_min_array.remove(y_min_array[i])
            x_min_array.remove(x_min_array[i])
        i += 1
    # i = 2

    # while i < (len(y_max_array)):
    #     if (x.index(x_max_array[i]) - x.index(x_min_array[i-1])) < 5:
    #         if x.index(x_max_array[i - 1])-x.index(x_max_array[i - 2])<15 or x.index(x_max_array[i])-x.index(x_max_array[i - 1])<15:
    #             x_max_array.remove(x_max_array[i - 1])
    #             y_max_array.remove(y_max_array[i - 1])
    #     i += 1


    # i = 2
    # print((len(y_max_array)))
    # while i < (len(x_max_array)):
    #     if (x.index(x_min_array[i]) - x.index(x_max_array[i])) < 10 :
    #         print(x.index(x_min_array[i]))
    #         print('x', x.index(x_max_array[i]))
    #         print(x.index(x_min_array[i]) - x.index(x_max_array[i]))
    #         if x.index(x_min_array[i - 1])-x.index(x_min_array[i - 2])<10 or x.index(x_min_array[i])-x.index(x_min_array[i - 1])<10:
    #             x_min_array.remove(x_min_array[i - 1])
    #             y_min_array.remove(y_min_array[i - 1])
    #             print('deleted', x_min_array[i - 1])
    #             i=2
    #     i+=1
    #     print('i',i)

    # Добавление последнего значения исходного массива к линиям максимумов и минимумов
    y_min_array.append(y[- 1])
    x_min_array.append(x[- 1])


    # Интерполяция линии минимумов
    temp = interpolate.interp1d(x_min_array, y_min_array)
    x_min_array_line = x
    y_min_array_line = temp(x_min_array_line)

    # Интерполяция линии максимумов
    temp = interpolate.interp1d(x_max_array, y_max_array)
    x_max_array_line = x
    y_max_array_line = temp(x_max_array_line)

    # Нахождение средней линии как половины разницы значений линий минимумов и максимумов по прямой иксов с
    # 0-й позиции
    x_middle_line_array = []
    y_middle_line_array = []
    i = 0
    while i < (len(x_min_array_line)):
        x_middle_line_array.append(x_max_array_line[i])
        y_middle_line_array.append((y_max_array_line[i] + y_min_array_line[i]) / 2)
        i += 1
    print('x_middle_line_array',x_middle_line_array)
    print('y_middle_line_array',y_middle_line_array)
    print('x_min_array', len(x_min_array), len(y_min_array),x_min_array )
    print('x_max_array', len(x_max_array), len(y_max_array), x_max_array)


    def surch_distance_min_max(x_middle_line_array: list, y_middle_line_array: list, x_min_array: list,
                               y_min_array: list, y_max_array, x_max_array: list):
        """
        Функция для нахождения расстояния от вершин до средней линии
        :param x_middle_line_array: значения по иксу для средней линии
        :param y_middle_line_array: значения по иреку для средней линии
        :param x_min_array: значения по иксу для линии минимумов
        :param y_min_array: значения по игреку для линии минимумов
        :param y_max_array:  значения по игреку для линии максимумов
        :param x_max_array: значения по игреку для линии максимумов
        :return: distance, x_points
        """

        # Создание словаря из точек минимума и максимума по иксу и по игреку. Взаимная сортировка.
        # Удаляется повтор точки начала и конца
        points_minimum = dict(zip(x_min_array, y_min_array))
        points_maximum = dict(zip(x_max_array, y_max_array))
        points_minimum.update(points_maximum)
        points_min_max = dict(sorted(points_minimum.items()))
        x_points = np.array([*points_min_max.keys()])

        # Создание numpy массива из точек минимума и максимума и массива из точек средней линии
        points_array = np.array([[*points_min_max.keys()], [*points_min_max.values()]])
        middle_line_array = np.array([[x_middle_line_array], [y_middle_line_array]])

        # Формула для нахождения расстояния от точки до точки. Находится минимальное расстояние - перпендикуляр.
        distance = []
        i = 0
        while i < (len(x_min_array) + len(x_max_array) - 2):
            distance.append(np.sqrt(np.min(
                np.square(middle_line_array[0, :] - points_array[0, i])
                + np.square(middle_line_array[1, :] - points_array[1, i]))))
            i += 1
        return distance, x_points

    distance, x_points = surch_distance_min_max(x_middle_line_array, y_middle_line_array, x_min_array,
                                                y_min_array, y_max_array, x_max_array)

    maximums = {'maxX': max_x, 'minX': min_x, 'maxY': max_y, 'minY': min_y}

    return MinMaxProcessing(
        max_points=Line(
            x=x_max_array,
            y=y_max_array
        ),
        min_points=Line(
            x=x_min_array,
            y=y_min_array
        ),
        max_line=Line(
            x=x_max_array_line,
            y=y_max_array_line
        ),
        min_line=Line(
            x=x_min_array_line,
            y=y_min_array_line
        ),
        middle_line=Line(
            x=x_middle_line_array,
            y=y_middle_line_array
        ),
        distance_line=Line(
            x=list(x_points),
            y=list(distance)
        ),
        maximums=maximums

    )


if __name__ == "__main__":
    plt.style.use('bmh')
    MinMaxProcessing = min_max_analyzer(cycles, strain)

    plt.plot(MinMaxProcessing.middle_line.x, MinMaxProcessing.middle_line.y, label='средняя линия')
    plt.ylabel('ε')
    plt.xlabel('τ')
    plt.plot(MinMaxProcessing.min_points.x, MinMaxProcessing.min_points.y, 'o')
    plt.plot(MinMaxProcessing.max_points.x, MinMaxProcessing.max_points.y, 'o')
    plt.plot(MinMaxProcessing.min_line.x, MinMaxProcessing.min_line.y, linewidth=1, linestyle='dashed',
             label='линия минимумов')
    plt.plot(MinMaxProcessing.max_line.x, MinMaxProcessing.max_line.y, linewidth=1, linestyle='dashed',
             label='линия максимумов')
    plt.plot(cycles, strain)

    plt.legend()
    plt.show()

    plt.plot(MinMaxProcessing.distance_line.x, MinMaxProcessing.distance_line.y, color='orange')
    plt.ylabel('ε')
    plt.xlabel('τ')
    plt.title('График отклонений')
    plt.show()
