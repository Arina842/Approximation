import numpy as np
import matplotlib.pyplot as plt

from scipy import interpolate


cycles = np.array([0.0, 0.05, 0.1, 0.15000000000000002, 0.2, 0.25, 0.30000000000000004, 0.35000000000000003, 0.4, 0.45, 0.5, 0.55, 0.6000000000000001, 0.65, 0.7000000000000001, 0.75, 0.8, 0.8500000000000001, 0.9, 0.9500000000000001, 1.0, 1.05, 1.1, 1.1500000000000001, 1.2000000000000002, 1.25, 1.3, 1.35, 1.4000000000000001, 1.4500000000000002, 1.5, 1.55, 1.6, 1.6500000000000001, 1.7000000000000002, 1.75, 1.8, 1.85, 1.9000000000000001, 1.9500000000000002, 2.0, 2.0500000000000003, 2.1, 2.15, 2.2, 2.25, 2.3000000000000003, 2.35, 2.4000000000000004, 2.45, 2.5, 2.5500000000000003, 2.6, 2.6500000000000004, 2.7, 2.75, 2.8000000000000003, 2.85, 2.9000000000000004, 2.95, 3.0, 3.0500000000000003, 3.1, 3.1500000000000004, 3.2, 3.25, 3.3000000000000003, 3.35, 3.4000000000000004, 3.45, 3.5, 3.5500000000000003, 3.6, 3.6500000000000004, 3.7, 3.75, 3.8000000000000003, 3.85, 3.9000000000000004, 3.95, 4.0, 4.05, 4.1000000000000005, 4.15, 4.2, 4.25, 4.3, 4.3500000000000005, 4.4, 4.45, 4.5, 4.55, 4.6000000000000005, 4.65, 4.7, 4.75, 4.800000000000001, 4.8500000000000005, 4.9, 4.95, 5.0, 5.050000000000001, 5.1000000000000005, 5.15, 5.2, 5.25, 5.300000000000001, 5.3500000000000005, 5.4, 5.45, 5.5, 5.550000000000001, 5.6000000000000005, 5.65, 5.7, 5.75, 5.800000000000001, 5.8500000000000005, 5.9, 5.95, 6.0, 6.050000000000001, 6.1000000000000005, 6.15, 6.2, 6.25, 6.300000000000001, 6.3500000000000005, 6.4, 6.45, 6.5, 6.550000000000001, 6.6000000000000005, 6.65, 6.7, 6.75, 6.800000000000001, 6.8500000000000005, 6.9, 6.95, 7.0, 7.050000000000001, 7.1000000000000005, 7.15, 7.2, 7.25, 7.300000000000001, 7.3500000000000005, 7.4, 7.45, 7.5, 7.550000000000001, 7.6000000000000005, 7.65, 7.7, 7.75, 7.800000000000001, 7.8500000000000005, 7.9, 7.95, 8.0, 8.05, 8.1, 8.15, 8.200000000000001, 8.25, 8.3, 8.35, 8.4, 8.450000000000001, 8.5, 8.55, 8.6, 8.65, 8.700000000000001, 8.75, 8.8, 8.85, 8.9, 8.950000000000001, 9.0]
)
strain = np.array([0.0, 0.0036223912502984144, 0.006248694538935843, 0.008280880969600123, 0.009871936941979813, 0.011313837900302905, 0.012592059705626758, 0.013518658474061258, 0.014221406779220078, 0.01471545255260215, 0.015009582464895754, 0.015149423132607774, 0.015555301045880652, 0.016026732157986466, 0.016464383807281116, 0.017107432280477303, 0.01762424542965377, 0.018115186891884696, 0.018800940822289877, 0.019724929873671523, 0.020711481802510492, 0.021691353770477387, 0.02256596319802301, 0.023168496731953585, 0.023622785416160405, 0.024008865368618782, 0.024340206594032087, 0.024723380284767938, 0.024885532190386715, 0.024865949990515206, 0.024607544499601734, 0.024444006668224553, 0.024403667030876354, 0.024677007027972833, 0.025086693980575676, 0.02543714150532681, 0.025808954823028734, 0.026114631833078963, 0.02674198023391326, 0.02744147965451512, 0.028492112729428386, 0.02927636734665459, 0.029995613740275064, 0.030444623579566173, 0.03071960968018299, 0.03104895231011005, 0.031345682668508526, 0.031613823698199324, 0.03164743145897162, 0.031395940611396896, 0.03102498449381914, 0.03068785153570474, 0.030621476481878084, 0.03065525164138534, 0.03091041622551268, 0.031128819508475215, 0.03132691072268572, 0.03156502991813337, 0.03204585269385914, 0.032670764478795446, 0.03342888486370131, 0.034219658450710254, 0.03482517630297618, 0.03508539621177175, 0.03529956569793458, 0.03551713942979553, 0.03572867765582344, 0.03580875227550024, 0.035782288768652554, 0.03549083908581726, 0.03495673730667365, 0.034576786687653065, 0.03430865575513653, 0.034410552582610374, 0.03445536041728521, 0.034666481605379204, 0.034785502340717346, 0.03494549022921283, 0.03531123401178569, 0.03590863760462812, 0.03678723746109433, 0.037480547897331545, 0.03803732563942621, 0.03823758483648191, 0.03838384562510673, 0.03858704129678793, 0.03872026991108219, 0.03871466053551066, 0.03864833421518071, 0.0383706484882804, 0.037916685526987154, 0.03735000538031478, 0.037078045793168334, 0.037112411953658955, 0.0371810016564288, 0.03732645423893319, 0.03745747561331146, 0.03755222777769522, 0.03790502213984049, 0.03856400921650873, 0.039279812075911864, 0.04001262385372001, 0.040454406313257966, 0.04076778719415133, 0.040910800354923366, 0.04103799933081721, 0.041118710838345965, 0.04108414311666933, 0.04100041269395722, 0.04058098308562634, 0.04003171316799643, 0.03955487986052347, 0.03942533777782164, 0.03936128371906748, 0.039375575102291616, 0.039402070619811165, 0.03953491557484181, 0.0397857685441381, 0.0401061301214953, 0.0406228612267853, 0.04138416484951103, 0.042110816496769295, 0.0425574316025645, 0.0428726291602848, 0.0430036561382475, 0.043124609603816505, 0.043223569915108874, 0.04323418517686351, 0.043141457058917254, 0.04275314561947125, 0.04216243848412571, 0.04164935786884438, 0.04144745553196283, 0.041346068356898094, 0.04128684453936013, 0.041291365053531946, 0.04135350093253503, 0.04158570842839861, 0.04183235220566155, 0.04226270272833633, 0.04285679050289338, 0.04349371691212173, 0.043928760811504666, 0.04401715661330497, 0.044134197627872296, 0.044209330709413984, 0.04425528797452646, 0.044134654540342794, 0.0439934711091634, 0.043584141243203915, 0.042931592995470995, 0.04233722879967708, 0.042100684982680256, 0.041862360318835855, 0.0418749038806036, 0.04192155416524195, 0.042017664982393406, 0.04217681510839147, 0.042451673169618384, 0.04292852597843711, 0.043618849056900506, 0.044266402079021425, 0.04458968314866574, 0.04484132198843628, 0.04492276038262848, 0.0449828632974629, 0.045, 0.0449475646183246, 0.044917722785117, 0.04444294004070858, 0.04395853557413027, 0.043311324309634164, 0.04302227199241331, 0.042967122814762934, 0.04302683157451812, 0.04311427623510878, 0.04316223688819129, 0.04335211496891115, 0.04361688441179664, 0.04418634272797559, 0.044936983088949535]
)
def cyclic_strain_analyzer( x: np.array, y: np.array):
    """
    .....................
    Функция для  последовательного нахождения максимумов и минимумов,
    интерполировании их линий, нахождения средней линии, нахождения растояния
    от вершин до средней линии и построение графика зависимости расстояния от количества циклов
    :param x:
    :param y:
    :return: np.array(x_max_array_new), np.array(y_max_array_new), np.array(x_min_array_new), np.array(y_min_array_new),
            np.array(x_middle_line_array), np.array(y_middle_line_array), np.array(distance_min),
            np.array(distance_max), maximums,x_points,y_points
    """

    x = x.tolist()
    y = y.tolist()
    print(len(x))
    plt.style.use('bmh')
    temp = interpolate.interp1d(x, y)
    x_new = np.arange(min(x), max(x), 0.0001)
    y_new = temp(x_new)
    x = x_new.tolist()
    y = y_new.tolist()
    print(len(x))


    maps_xy = [0]

    i = 0
    while i < (len(x)-1):
        x_delta = x[i+1]-x[i]
        y_delta = y[i+1]-y[i]
        maps_xy.append(y_delta/x_delta)
        i += 1



    x_max = [0]
    y_max = [0]
    x_min = [0]
    y_min = [0]
    i=0
    while i < (len(maps_xy)-1):
        if maps_xy[i]>0 and maps_xy[i+1]<0:
            x_max.append(x[i])
            y_max.append(y[i])
        i+=1
    i=0
    while i < (len(maps_xy)-1):
        if maps_xy[i]<0 and maps_xy[i+1]>0:
            x_min.append(x[i])
            y_min.append(y[i])
        i+=1

    plt.axhline(0)
    plt.plot(x, y)

    plt.scatter(x_max,y_max)
    plt.scatter(x_min,y_min)
    plt.plot(x, maps_xy)
    plt.show()

if __name__ == "__main__":
    cyclic_strain_analyzer(cycles, strain)
